---
description: 
globs: 
alwaysApply: true
---
# Product requirements document
## Product Overview


This document outlines the frontend implementation guidelines for the P2P.ORG Staking Showcase Application. The primary goal is to provide a functional, reference implementation demonstrating how crypto intermediaries (such as exchanges, wallets, and custodians) can integrate P2P.ORG's Unified API to offer staking, unstaking, and withdrawal functionalities to their end-users.

The application will feature a clean user interface allowing users to connect their wallets and interact with core staking flows. All interactions with the P2P.ORG Unified API will occur securely via an internal API proxy layer (implemented as Next.js API routes/Vercel Serverless Functions) to manage authentication (Bearer token) and abstract the direct API calls.

*Target Audience*

Developers and technical teams at crypto exchanges, wallets, custodians, and other intermediary platforms seeking to integrate P2P.ORG staking services.

Product managers evaluating the P2P.ORG Unified API for staking features.

## Tech Stack

Framework: Next.js (using the App Router)

- UI Library: Shadcn UI
- Styling: Tailwind CSS (as configured by Shadcn UI)
- Icons: Lucide React (lucide-react)
- Wallet Connection: Wagmi + Viem + RainbowKit / Web3Modal (or similar standard libraries)
- Forms: React Hook Form + Zod (for validation on staking/unstaking amount inputs)
- State Management: Zustand / Jotai / React Context (Choose based on complexity, start simple for managing wallet state, balances, transaction status)
- Data Fetching Client: Native fetch API, SWR, or React Query (for calling the internal /api proxy routes)
- API Proxy Runtime: Node.js (via Vercel Serverless Functions / Next.js API routes)

## Core Features & Functionalities

The frontend showcase application will implement the following core user flows, interacting with the internal API proxy (/api) to execute P2P.ORG API calls:

### Core user flows
** Staking flow **
1. Create stake request
    - UI parameters for user to choose: chain, network, stakerAddress, amount
    - UI actions for user: click on "stake" button
    - Parameters for backend: chain, network, stakerAddress, amount
2. Sign the transaction & broadcast it
    - UI parameters for user to choose: none
    - UI actions for user: click on "sign & broadcast" button
    - Parameters for backend:
        - RPC_PROVIDER (from .env)
        - KEYSTORE_PATH(from .env)
        - KEYSTORE_PASSWORD(from .env)
        - RAW_TRANSACTION (from API response of the previous step)
    - Parameters for broadcasting:
        - chain (from API response of the previous step)
        - network (from API response of the previous step)
        - stakerAddress (from API response of the previous step)
        - signedTransaction (from signing step before)

** Unstake flow **
1. Create stake request
    - UI parameters for user to choose: chain, network, stakerAddress, amount
    - UI actions for user: click on "unstake" button
    - Parameters for backend: chain, network, stakerAddress
2. Sign the transaction & broadcast it
    - UI parameters for user to choose: none
    - UI actions for user: click on "sign & broadcast" button
    - Parameters for backend:
        - RPC_PROVIDER (from .env)
        - KEYSTORE_PATH(from .env)
        - KEYSTORE_PASSWORD(from .env)
        - RAW_TRANSACTION (from API response of the previous step)
    - Parameters for broadcasting:
        - chain (from API response of the previous step)
        - network (from API response of the previous step)
        - stakerAddress (from API response of the previous step)
        - signedTransaction (from signing step before)

** Withdrawal flow **
1. Create stake request
    - UI parameters for user to choose: chain, network, stakerAddress
    - UI actions for user: click on "withdraw" button
    - Parameters for backend: chain, network, stakerAddress
2. Sign the transaction & broadcast it
    - UI parameters for user to choose: none
    - UI actions for user: click on "sign & broadcast" button
    - Parameters for backend:
        - RPC_PROVIDER (from .env)
        - KEYSTORE_PATH(from .env)
        - KEYSTORE_PASSWORD(from .env)
        - RAW_TRANSACTION (from API response of the previous step)
    - Parameters for broadcasting:
        - chain (from API response of the previous step)
        - network (from API response of the previous step)
        - stakerAddress (from API response of the previous step)
        - signedTransaction (from signing step before)

### Core user interfaces
The interfaces necessary for these flows are as follows. The single-page application will include components/sections for:
- Network Selection
- Portfolio dashboard Section with dummy data (view dummy balances/staked positions for selected network)
- Staking Interface: Allow users to select an asset, potentially a validator (if applicable via API), enter an amount, and initiate the staking transaction flow (calls /api/stake proxy).
- Unstaking Interface: Allow users to view their staked positions and initiate the unstaking process for a selected position/amount (calls /api/unstake proxy).
- Withdrawal Interface: Allow users to claim available rewards or withdraw principal funds that have completed the unstaking period (calls /api/withdraw or similar proxy endpoints).


### API Interaction Guidelines
- All interactions with the external P2P.ORG Unified API must go through the internal API proxy routes defined in the /api directory (e.g., /api/stake, /api/unstake, /api/withdraw, /api/balances).
- The frontend must not store or handle the P2P.ORG API Bearer token directly.
- Frontend data fetching functions (e.g., in lib/p2pApiClient.ts) will call relative paths like /api/stake with appropriate request bodies.
- API routes in /api are responsible for:

Securely retrieving the P2P.ORG Bearer token from server-side environment variables (process.env).

Validating incoming requests from the frontend.

Constructing and executing the correct calls to the specific P2P.ORG Unified API endpoints for staking, unstaking, withdrawal, fetching balances, etc.

Returning clear success or error responses to the frontend.

## Folder Structure (Based on Next.js App Router & shadcn/ui)

This structure integrates the frontend application and the API proxy routes within a single Next.js project, suitable for deployment on Vercel.

p2p-staking-showcase/
├── api/                   # API Proxy Routes (Serverless Functions)
│   ├── stake.ts           # Handles POST /api/v1/unified/staking/stake
│   ├── unstake.ts         # Handles POST /api/v1/unified/staking/unstake
│   ├── withdraw.ts        # Handles POST /api/v1/unified/staking/withdraw
│   └── broadcast.ts       # Handles POST /api/v1/unified/transaction/broadcast
├── app/                   # Next.js App Router: Single Page UI
│   ├── layout.tsx         # Root layout (includes wallet/network provider setup)
│   ├── page.tsx           # THE SINGLE PAGE: Contains all UI sections/components
│   └── globals.css
├── components/            # Shared & UI Components for the single page
│   ├── ui/                # Shadcn UI components
│   ├── layout/            # Layout components (Navbar, Footer, WalletConnect Button, NetworkSwitcher)
│   ├── sections/          # Major sections of the single page (Portfolio, StakingArea, History)
│   │   ├── PortfolioSection.tsx
│   │   └── StakingSection.tsx # Contains forms/modals for stake/unstake/withdraw
│   └── shared/            # Common components (AssetInput, TxStatusLabel, ConnectWalletPrompt)
├── config/                # Configuration files
│   └── secrets/           # Network-specific secrets (e.g., JSON keyfiles - MUST BE IN .gitignore)
│       ├── secret_example_network1.json
│       └── secret_example_network2.json
├── hooks/                 # Custom React Hooks (e.g., useP2PBalances(network), useStakingActions(network))
├── lib/                   # Utility functions, constants, API client, network configs
│   ├── constants.ts
│   ├── networks/          # Network-specific configurations or signing helpers/params (public info)
│   │   ├── index.ts       # Exports network configs/helpers
│   │   └── [networkName].config.ts # e.g., ethereum.config.ts, cosmos.config.ts
│   ├── p2pApiClient.ts    # Frontend functions using fetch('/api/v1/unified/...'), takes network param
│   ├── utils.ts           # General utils + Shadcn utils
│   └── wallet.ts          # Wallet connection config (Wagmi - configured for multiple chains)
├── public/                # Static assets
│   └── logo.svg
├── package.json           # Dependencies
├── .env                   # For local development secrets (e.g., P2P.ORG API Key, or wallet passwords)
├── next.config.mjs        # Next.js config
├── tsconfig.json          # TypeScript config
├── postcss.config.mjs     # PostCSS config (for Tailwind)
├── components.json        # Shadcn UI config
└── .gitignore             # Ensure node_modules/, .env, .next/, config/secrets/ are ignored


